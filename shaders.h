#pragma once

// GENERATED BY scripts/gen_shaders_header.py 

static const char* _shader_axis_frag_data = "#version 450 core\n\nuniform vec3 uColor;\n\nout vec4 OutColor;\n\nvoid main() \n{\n	OutColor = vec4(uColor, 1.0);\n}";
static const char* _shader_axis_vert_data = "#version 450 core\n\nlayout(location = 0) in vec3 vPos;\n\nuniform mat4 vMat;\nuniform mat4 pMat;\n\nvoid main()\n{\n	gl_Position = pMat * vMat * vec4(vPos, 1.0);\n}";
static const char* _shader_light_cube_frag_data = "#version 450 core\n\nvoid main()\n{\n    gl_FragColor = vec4(1.0);\n}";
static const char* _shader_light_cube_vert_data = "#version 450 core\n\nlayout(location = 0) in vec3 vPos;\n\nuniform mat4 modelMat;\nuniform mat4 viewMat;\nuniform mat4 projMat;\n\nvoid main()\n{\n	gl_Position = projMat * viewMat * modelMat * vec4(vPos, 1.0);\n}";
static const char* _shader_torus_frag_data = "#version 450 core\n\nin vec3 vertexPos;\nin vec3 normal;\n\nuniform vec3 materialColor;\nuniform vec3 lightPos;\nuniform vec3 eyePos;\n\nout vec3 color;\n\nvoid main()\n{\n	// Bling-Phong lightning model\n\n	float lightIntensity = 0.8f;\n	float objectShininess = 64.0f;\n	float specularStrength = 1.0f;\n	//vec3 lightColor = vec3(0.0, 0.0, 1.0);\n\n	// normaliZe vectors\n	vec3 norm = normalize(normal);\n	vec3 lightDir = normalize(lightPos - vertexPos);\n	vec3 viewDir = normalize(eyePos - vertexPos);\n	vec3 halfwayDir = normalize(lightDir + viewDir);\n\n	vec3 ambient = vec3(0.1);\n\n	// diffuse \n	vec3 diff = vec3(max(dot(norm, lightDir), 0.0) * lightIntensity);\n\n	// specular \n	\n    //vec3 reflectDir = reflect(-lightDir, norm);  \n    float spec = pow(max(dot(norm, halfwayDir), 0.0), objectShininess);\n    vec3 specular = vec3(specularStrength * spec);  \n\n	// The light loses its intensity the futher it travels\n	float lightDist = distance(lightPos, vertexPos);\n	float attenuation = 1.0 / (1.0 + 0.01*lightDist + 0.01*lightDist*lightDist); //min(2.0f / lightDist, 1.0);\n\n	diff *= attenuation;\n	specular *= attenuation;\n\n	color = (ambient + diff + specular) * materialColor;\n}";
static const char* _shader_torus_vert_data = "#version 450 core\n\nlayout(location = 0) in vec3 aVert;\nlayout(location = 1) in vec3 aNorm;\n\nuniform mat4 viewMat;\nuniform mat4 projMat;\nuniform mat4 normalMat;\nuniform mat4 modelMat;\n\nuniform vec3 lightPos;\n\nout vec3 vertexPos;\nout vec3 normal;\n\nvoid main()\n{\n	vertexPos = vec3(modelMat * vec4(aVert, 1.0));\n    normal = (normalMat * vec4(aNorm, 1.0)).xyz;\n    \n    gl_Position = projMat * viewMat * vec4(vertexPos, 1.0);\n}";
static const char* _shader_torus_tex_frag_data = "#version 450 core\n\nin vec3 vertexPos;\nin vec3 normal;\nin vec2 texPos;\n\nuniform vec3 lightPos;\nuniform vec3 eyePos;\nuniform sampler2D sampler;\n\nout vec3 color;\n\nvoid main()\n{\n	// Bling-Phong lightning model\n\n	float lightIntensity = 0.8f;\n	float objectShininess = 64.0f;\n	float specularStrength = 1.0f;\n	\n\n\n	// normaliZe vectors\n	vec3 norm = normalize(normal);\n	vec3 lightDir = normalize(lightPos - vertexPos);\n	vec3 viewDir = normalize(eyePos - vertexPos);\n	vec3 halfwayDir = normalize(lightDir + viewDir);\n\n	vec3 ambient = vec3(0.1);\n\n	// diffuse \n	vec3 diff = vec3(max(dot(norm, lightDir), 0.0) * lightIntensity);\n\n	// specular \n	\n    //vec3 reflectDir = reflect(-lightDir, norm);  \n    float spec = pow(max(dot(norm, halfwayDir), 0.0), objectShininess);\n    vec3 specular = vec3(specularStrength * spec);  \n\n	// The light loses its intensity the futher it travels\n	float lightDist = distance(lightPos, vertexPos);\n	float attenuation = 1.0 / (1.0 + 0.01*lightDist + 0.01*lightDist*lightDist); //min(2.0f / lightDist, 1.0);\n\n	diff *= attenuation;\n	specular *= attenuation;\n\n	vec3 texColor = texture(sampler, texPos).xyz;\n	color = (ambient + diff + specular) * texColor;\n}";
static const char* _shader_torus_tex_vert_data = "#version 450 core\n\nlayout(location = 0) in vec3 aVert;\nlayout(location = 1) in vec3 aNorm;\nlayout(location = 2) in vec2 inTexPos;\n\nuniform mat4 viewMat;\nuniform mat4 projMat;\nuniform mat4 normalMat;\nuniform mat4 modelMat;\n\nuniform vec3 lightPos;\n\nout vec3 vertexPos;\nout vec3 normal;\nout vec2 texPos;\n\nvoid main()\n{\n	vertexPos = vec3(modelMat * vec4(aVert, 1.0));\n    normal = (normalMat * vec4(aNorm, 1.0)).xyz;\n    \n    gl_Position = projMat * viewMat * vec4(vertexPos, 1.0);\n    texPos = inTexPos;\n}";
